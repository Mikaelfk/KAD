image: "debian:latest"

stages:
    - Build
    - Test
    - Linting
    - Deploy

build docker img:
    image: docker:20.10.13
    stage: Build
    when: manual
    services:
        - docker:20.10.13-dind
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build -t registry.gitlab.com/bachelor_group9_2022/kvalitetssikring-av-digitisering/ci-image:latest .
        - docker push registry.gitlab.com/bachelor_group9_2022/kvalitetssikring-av-digitisering/ci-image:latest

pytest:
    image: registry.gitlab.com/bachelor_group9_2022/kvalitetssikring-av-digitisering/ci-image:latest
    stage: Test
    cache:
        - key:
              files:
                  - backend/requirements.txt
          paths:
              - backend/.cache/pip
              - backend/venv/
        - key: backend-coverage-report
          paths:
              - backend/coverage.xml
          policy: push
    variables:
        PIP_CACHE_DIR: "$CI_PROJECT_DIR/backend/.cache/pip"
    before_script:
        - cd backend/
        - pip3 install virtualenv
        - python3 -m virtualenv venv --python=python3.10
        - source venv/bin/activate
    script:
        - pip3 install -r requirements.txt
        - cp tests/test_config/test_config.ini config.ini
        - python3 -m coverage erase
        - python3 -m coverage run -m pytest tests/
        - python3 -m coverage xml -i

reacttest:
    image: node:17.6.0
    stage: Test
    cache:
        - key:
              files:
                  - frontend/package-lock.json
          paths:
              - frontend/.npm/
        - key: frontend-coverage-report
          paths:
              - frontend/test-report.xml
          policy: push
    before_script:
        - cd frontend/
        - npm ci --cache .npm --prefer-offline
    script:
        - cp src/config.json.template src/config.json
        - CI=true npm test

sonarqube-check:
    image:
        name: sonarsource/sonar-scanner-cli:latest
        entrypoint: [""]
    variables:
        SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
        GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
    cache:
        - key: frontend-coverage-report
          paths:
              - frontend/test-report.xml
          policy: pull
        - key: backend-coverage-report
          paths:
              - backend/coverage.xml
          policy: pull
        - key: "${CI_JOB_NAME}"
          paths:
              - .sonar/cache
    script:
        - sonar-scanner
    allow_failure: true
    only:
        - main # or the name of your main branch
    stage: Linting

pages:
    stage: Deploy
    image: ubuntu:20.04
    cache:
        - key:
              files:
                  - backend/requirements.txt
          paths:
              - backend/.cache/pip
              - backend/venv/
        - key: backend-coverage-report
          paths:
              - backend/coverage.xml
          policy: push
    variables:
        PIP_CACHE_DIR: "$CI_PROJECT_DIR/backend/.cache/pip"
    before_script:
        - cd backend/
        - apt update && apt install python3-pip -y
        - pip3 install virtualenv
        - python3 -m virtualenv venv --python=python3.10
        - source venv/bin/activate
    script:
        - pip3 install -r requirements.txt
        - python3 -m mkdocs build
        - mkdir -p ../public/docs
        - mv site/* ../public/docs/
    artifacts:
        paths:
            - public
